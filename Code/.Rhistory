Formula_Valence_sd <- valence_sd ~ y
d0.1 <- lm(Formula_Valence_sd,data=data)
d0.2 <- glm(Formula_Valence_sd,data=data, family = gaussian(link = "inverse"))
d0.3 <- glm(Formula_Valence_sd,data=data, family = gaussian(link = "log"))
d0.4 <- glm(Formula_Valence_sd,data=data, family = Gamma(link = "identity"))
d0.5 <- glm(Formula_Valence_sd,data=data, family = Gamma(link = "inverse"))
d0.6 <- glm(Formula_Valence_sd,data=data, family = Gamma(link = "log"))
d0.7 <- glm(Formula_Valence_sd,data=data, family = inverse.gaussian(link = "identity"))
d0.8 <- glm(Formula_Valence_sd,data=data, family = inverse.gaussian(link = "inverse"))
d0.9 <- glm(Formula_Valence_sd,data=data, family = inverse.gaussian(link = "log"))
# Remove the models that produced errors in the line below, the one with the lowest value is the best fitting model
tabel <- cbind(AIC(d0.1), AIC(d0.2), AIC(d0.3), AIC(d0.4), AIC(d0.5), AIC(d0.6), AIC(d0.7), AIC(d0.8), AIC(d0.9))
emphasize.strong.cells(which(tabel == min(tabel), arr.ind = TRUE))
pandoc.table(tabel)
Anova(d0.7)
emmeans(d0.7, pairwise ~ y , adjust ="fdr", type="response")
Anova(d0.8)
emmeans(d0.8, pairwise ~ y , adjust ="fdr", type="response")
Anova(d0.9)
emmeans(d0.9, pairwise ~ y , adjust ="fdr", type="response")
max(data$valence_sd)
data$valence_sd == max(data$valence_sd)
find(data$valence_sd == max(data$valence_sd))
which(data$valence_sd == max(data$valence_sd))
#### Settings & Packages #### -----------------------------------------------------
rm(list = ls())
options(contrasts = c("contr.sum","contr.poly")) #use this for the p value of the t test
library(lme4)
library(lmerTest)
library(effects)
library(dplyr)
library(car)
library(emmeans)
library(fitdistrplus)
library(dplyr)
library(car)
library(MuMIn)
library(ggplot2)
library(ggsignif)
library(gridExtra)
library(tidyverse)
library(ggeffects)
library(pander)
#### IMPORT DATA & INSPECTION #### -------------------------------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # CHANGE THIS IF NOT USING RSTUDIO
data <- read.csv2("data/interim/stats.csv", head = TRUE, sep=",",  stringsAsFactors=FALSE)
# Check whether R recognizes the variable types correctly
options(digits=16)
str(data)
data$subject <- factor(data$subject)
data$y <- factor(data$y)
data$arousal_med <- as.numeric(data$arousal_med)
data$arousal_sd <- as.numeric(data$arousal_sd)
data$valence_med <- as.numeric(data$valence_med)
data$valence_sd <- as.numeric(data$valence_sd)
# Exclude data?
data <- data[data$X != 3,]
data <- data[data$X != 35,]
############# AROUSAL ##################
Formula_Arousal <- arousal_med ~ y
############ VALENCE SD #################
Formula_Valence_sd <- valence_sd ~ y
d0.1 <- lm(Formula_Valence_sd,data=data)
d0.2 <- glm(Formula_Valence_sd,data=data, family = gaussian(link = "inverse"))
d0.3 <- glm(Formula_Valence_sd,data=data, family = gaussian(link = "log"))
d0.4 <- glm(Formula_Valence_sd,data=data, family = Gamma(link = "identity"))
d0.5 <- glm(Formula_Valence_sd,data=data, family = Gamma(link = "inverse"))
d0.6 <- glm(Formula_Valence_sd,data=data, family = Gamma(link = "log"))
d0.7 <- glm(Formula_Valence_sd,data=data, family = inverse.gaussian(link = "identity"))
d0.8 <- glm(Formula_Valence_sd,data=data, family = inverse.gaussian(link = "inverse"))
d0.9 <- glm(Formula_Valence_sd,data=data, family = inverse.gaussian(link = "log"))
# Remove the models that produced errors in the line below, the one with the lowest value is the best fitting model
tabel <- cbind(AIC(d0.1), AIC(d0.2), AIC(d0.3), AIC(d0.4), AIC(d0.5), AIC(d0.6), AIC(d0.7), AIC(d0.8), AIC(d0.9))
emphasize.strong.cells(which(tabel == min(tabel), arr.ind = TRUE))
pandoc.table(tabel)
Anova(d0.9)
emmeans(d0.9, pairwise ~ y , adjust ="fdr", type="response")
plot2b <- pirateplot(
formula = valence_sd ~ y,
data = data,
theme = 0,
pal = "espresso",
main = "facial valence (sd) between yes and no y",
bean.f.o = .6, # Bean fill
point.o = .3,  # Points
inf.f.o = .7,  # Inference fill
inf.b.o = .8,  # Inference border
avg.line.o = 1,  # Average line
# bar.f.o = .5, # Bar
inf.f.col = "white",  # Inf fill col
inf.b.col = "black",  # Inf border col
avg.line.col = "black",  # avg line col
bar.f.col = gray(.8),  # bar filling color
point.pch = 21,
point.bg = "white",
point.col = "black",
point.cex = .7,
xlab = "",
)
############# AROUSAL SD ##################
Formula_Arousal_sd <- arousal_sd ~ y
d0.1 <- lm(Formula_Arousal_sd,data=data)
d0.2 <- glm(Formula_Arousal_sd,data=data, family = gaussian(link = "inverse"))
d0.3 <- glm(Formula_Arousal_sd,data=data, family = gaussian(link = "log"))
d0.4 <- glm(Formula_Arousal_sd,data=data, family = Gamma(link = "identity"))
d0.5 <- glm(Formula_Arousal_sd,data=data, family = Gamma(link = "inverse"))
d0.6 <- glm(Formula_Arousal_sd,data=data, family = Gamma(link = "log"))
d0.7 <- glm(Formula_Arousal_sd,data=data, family = inverse.gaussian(link = "identity"))
d0.8 <- glm(Formula_Arousal_sd,data=data, family = inverse.gaussian(link = "inverse"))
d0.9 <- glm(Formula_Arousal_sd,data=data, family = inverse.gaussian(link = "log"))
# Remove the models that produced errors in the line below, the one with the lowest value is the best fitting model
tabel <- cbind(AIC(d0.1), AIC(d0.2), AIC(d0.3), AIC(d0.4), AIC(d0.5), AIC(d0.6), AIC(d0.7), AIC(d0.8), AIC(d0.9))
emphasize.strong.cells(which(tabel == min(tabel), arr.ind = TRUE))
pandoc.table(tabel)
Anova(d0.7)
emmeans(d0.7, pairwise ~ y , adjust ="fdr", type="response")
plot1b <- pirateplot(
formula = arousal_sd ~ y,
data = data,
theme = 0,
pal = "espresso",
main = "facial arousal (sd) between yes and no y",
bean.f.o = .6, # Bean fill
point.o = .3,  # Points
inf.f.o = .7,  # Inference fill
inf.b.o = .8,  # Inference border
avg.line.o = 1,  # Average line
# bar.f.o = .5, # Bar
inf.f.col = "white",  # Inf fill col
inf.b.col = "black",  # Inf border col
avg.line.col = "black",  # avg line col
bar.f.col = gray(.8),  # bar filling color
point.pch = 21,
point.bg = "white",
point.col = "black",
point.cex = .7,
xlab = "",
)
#############################
#                           #
##  PreProcessing PMS data ##
#############################
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
library(dplyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# Set working directory to current directory
dataDir = "Z:/ghepmk_data/2020_Kappen_PMS//"
dateDir = "14042021//"
DataFrame <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"results-survey987313.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
DataFrame <- select(DataFrame, -c(lastpage, startlanguage, startdate, datestamp, IFC1, IFC2, IFC3, IFC4, IFC5, IFC6, auto1.SQ001., AgeValidation.SQ001., AgeValidation.SQ002., interviewtime, groupTime17, IFC1Time, IFC2Time, IFC3Time, IFC4Time, IFC5Time, IFC6Time, auto1Time, groupTime13, GenderTime, AgeTime, MenstruationTime, FirstMenstrualTime, RegularMentrualTime, MenopauseTime, PregnantTime, PostPregnantTime, ContraceptiveTime, DutchTime, HormonesTime, MentalTime, LaptopTime, MenstrualToelichtTime, CurrentMensesTime, MenstrualStartTime, MenstrualEndTime, MenstrualEndExpectedTime, MenstrualDurationTime, AgeValidationTime, EMailTime, groupTime16, SymptomsTime, DisturbanceTime, SymptomsPRETime, groupTime14, RRSTime, groupTime15, DASS21Time )) #Remove columns with irrelevant data
DataFrame <- select(DataFrame, -c(lastpage, startlanguage, startdate, datestamp, IFC1, IFC2, IFC3, IFC4, IFC5, IFC6, auto1.SQ001., AgeValidation.SQ001., AgeValidation.SQ002., interviewtime, groupTime17, IFC1Time, IFC2Time, IFC3Time, IFC4Time, IFC5Time, IFC6Time, auto1Time, groupTime13, GenderTime, AgeTime, MenstruationTime, FirstMenstrualTime, RegularMentrualTime, MenopauseTime, PregnantTime, PostPregnantTime, ContraceptiveTime, DutchTime, HormonesTime, MentalTime, LaptopTime, MenstrualToelichtTime, CurrentMensesTime, MenstrualStartTime, MenstrualEndTime, MenstrualEndExpectedTime, MenstrualDurationTime, AgeValidationTime, EMailTime, groupTime16, SymptomsTime, DisturbanceTime, SymptomsPRETime, groupTime14, RRSTime, groupTime15, DASS21Time )) #Remove columns with irrelevant data
#############################
#                           #
##  PreProcessing PMS data ##
#############################
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
library(dplyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# Set working directory to current directory
dataDir = "Z:/ghepmk_data/2020_Kappen_PMS//"
dateDir = "14042021//"
DataFrame <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"results-survey987313.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
DataFrame <- select(DataFrame, -c(lastpage, startlanguage, startdate, datestamp, IFC1, IFC2, IFC3, IFC4, IFC5, IFC6, auto1.SQ001., AgeValidation.SQ001., AgeValidation.SQ002., interviewtime, groupTime17, IFC1Time, IFC2Time, IFC3Time, IFC4Time, IFC5Time, IFC6Time, auto1Time, groupTime13, GenderTime, AgeTime, MenstruationTime, FirstMenstrualTime, RegularMentrualTime, MenopauseTime, PregnantTime, PostPregnantTime, ContraceptiveTime, DutchTime, HormonesTime, MentalTime, LaptopTime, MenstrualToelichtTime, CurrentMensesTime, MenstrualStartTime, MenstrualEndTime, MenstrualEndExpectedTime, MenstrualDurationTime, AgeValidationTime, EMailTime, groupTime16, SymptomsTime, DisturbanceTime, SymptomsPRETime, groupTime14, RRSTime, groupTime15, DASS21Time )) #Remove columns with irrelevant data
DataFrame <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"results-survey987313.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
View(DataFrame)
DataFrame <- select(DataFrame, -c(lastpage, startlanguage, startdate, datestamp, IFC1, IFC2, IFC3, IFC4, IFC5, IFC6, auto1.SQ001., AgeValidation.SQ001., AgeValidation.SQ002., interviewtime, groupTime17, IFC1Time, IFC2Time, IFC3Time, IFC4Time, IFC5Time, IFC6Time, auto1Time, groupTime13, GenderTime, AgeTime, MenstruationTime, FirstMenstrualTime, RegularMentrualTime, MenopauseTime, PregnantTime, PostPregnantTime, ContraceptiveTime, DutchTime, HormonesTime, MentalTime, LaptopTime, MenstrualToelichtTime, CurrentMensesTime, MenstrualStartTime, MenstrualEndTime, MenstrualEndExpectedTime, MenstrualDurationTime, AgeValidationTime, EMailTime, groupTime16, SymptomsTime, DisturbanceTime, SymptomsPRETime, groupTime14, RRSTime, groupTime15, DASS21Time )) #Remove columns with irrelevant data
### Clean data --> remove all rows without submitdate, since that means they didnt complete the screening
DataFrame <- DataFrame[!(is.na(DataFrame$submitdate) | DataFrame$submitdate==""), ]
substrRight <- function(x, n){ # A function that takes the last n characters of a string
substr(x, nchar(x)-n+1, nchar(x))}
DataFrameClean <- data.frame()
DataFrameClean <- select(DataFrame, c(ï..id, Age))
View(DataFrameClean)
DataFrameClean <- select(DataFrame, c(ï..id, Age, FirstMenstrual, MenstrualStart, MentrualEnd, MenstrualEndExpected, MenstrualDuration))
DataFrameClean <- select(DataFrame, c(ï..id, Age, FirstMenstrual, MenstrualStart, MenstrualEnd, MenstrualEndExpected, MenstrualDuration))
### Get total score per questionnaire
#Symptoms.PST 1-14
#Disturbance.PST A-E? 1-5
#RRS.R 1-22
#DASS21.DAS 1-21
################ Linking Excel file to assess A-B/B-A distribution #################
ExcelPMS <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"Participant-Excel.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
library(dplyr)
Randomisatie <- select(ExcelPMS, Entry.nummer, ï..Participantnummer, Randomisatie)
DataFrame$testVolgorde = ''
DataFrame$participantID = ''
for (i in 1:nrow(DataFrame)){ # Loop over all participant rows that filled out screening completely
loc = which(Randomisatie$Entry.nummer == DataFrame$ï..id[i]) # Check for location of their entry number in the participant Excel file
if (length(loc) == 0) {
print(paste0("Something going on with participant ",toString(DataFrame$ï..id[i])," AKA entrynumber " ))
} else {
DataFrame$testVolgorde[i] = Randomisatie$Randomisatie[loc] # Use this location to grab their randomisation and participantNumber allocated
DataFrame$participantID[i] = Randomisatie$ï..Participantnummer[loc]
}
}
# Add to Clean Dataframe
Order <- DataFrame$testVolgorde
participantNo <- DataFrame$participantID
DataFrameClean <- cbind(DataFrameClean, participantNo, Order)
########################## Symptoms ###########################
SymptomsData <- DataFrame[ , grepl( "Symptoms.PST" , names( DataFrame ) ) ] # Make dataset with only Symtoms variables
SymptomsData <- cbind(SymptomsData, Symptoms.PST04=c(DataFrame$Symptoms.SPST04))
SymptomsData <- SymptomsData[,c(1,2,3,14,4,5,6,7,8,9,10,11,12,13)]
allSymptoms = 0
for(i in 1:nrow(DataFrame)) { # loop through participants
SymptomsScore <- 0
for(t in 1:ncol(SymptomsData)){ # loop through questions
temp = as.numeric(substrRight(unlist(SymptomsData[t])[i],1)) # Take value i (participant) from SymptomsDATA, unlist, then take last character and turn it into a number (double)
SymptomsScore <- SymptomsScore + temp
}
allSymptoms[i] <- SymptomsScore
}
DataFrameClean <- cbind(DataFrameClean, allSymptoms)
########################## Disturbance ###########################
DisturbanceData <- DataFrame[ , grepl( "Disturbance.PST" , names( DataFrame ) ) ] # Make dataset with only Disturbance variables
allDisturbance = 0
for(i in 1:nrow(DataFrame)) { # loop through participants
DisturbanceScore <- 0
for(t in 1:ncol(DisturbanceData)){ # loop through questions
temp = as.numeric(substrRight(unlist(DisturbanceData[t])[i],1)) # Take value i (participant) from DisturbanceDATA, unlist, then take last character and turn it into a number (double)
DisturbanceScore <- DisturbanceScore + temp
}
allDisturbance[i] <- DisturbanceScore
}
DataFrameClean <- cbind(DataFrameClean, allDisturbance)
########################## RRS ###########################
RRSData <- DataFrame[ , grepl( "RRS.R" , names( DataFrame ) ) ] # Make dataset with only RRS variables
allRRS = 0
for(i in 1:nrow(DataFrame)) { # loop through participants
RRSScore <- 0
for(t in 1:ncol(RRSData)){ # loop through questions
temp = as.numeric(substrRight(unlist(RRSData[t])[i],1)) # Take value i (participant) from RRSDATA, unlist, then take last character and turn it into a number (double)
RRSScore <- RRSScore + temp
}
allRRS[i] <- RRSScore
}
DataFrameClean <- cbind(DataFrameClean, allRRS)
########################## DASS ###########################
DASSData <- data.frame(DASS.Total = matrix(NA, nrow = nrow(DataFrameClean), ncol = 1), DASS.Stress = matrix(NA, nrow = nrow(DataFrameClean), ncol = 1), DASS.Anxiety = matrix(NA, nrow = nrow(DataFrameClean), ncol = 1), DASS.Depresh = matrix(NA, nrow = nrow(DataFrameClean), ncol = 1))
DASSDataframe <- DataFrame[ , grepl( "DASS21.DAS" , names( DataFrame ) ) ] # Make dataset with only DASS variables
for(i in 1:nrow(DataFrame)) { # loop through participants
DASSScore <- 0
DASSStress <- 0
DASSAnxiety <- 0
DASSDepresh <- 0
for(t in 1:ncol(DASSDataframe)){ # loop through questions
temp = as.numeric(substrRight(unlist(DASSDataframe[t])[i],1)) # Take value i (participant) from DisturbanceDATA, unlist, then take last character and turn it into a number (double)
DASSScore <- DASSScore + temp
if (t == 1 | t == 6 | t == 8 | t == 11 | t == 12 | t == 14 | t == 18){
DASSStress <- DASSStress + temp
} else if (t == 2 | t == 4 | t == 7 | t == 9 | t == 15 | t == 19 | t == 20) {
DASSAnxiety <- DASSAnxiety + temp
} else if (t == 3 | t == 5 | t == 10 | t == 13 | t == 16 | t == 17 | t == 21){
DASSDepresh <- DASSDepresh + temp
}
}
DASSData$DASS.Total[i] <- DASSScore
DASSData$DASS.Stress[i] <- DASSStress
DASSData$DASS.Anxiety[i] <- DASSAnxiety
DASSData$DASS.Depresh[i] <- DASSDepresh
}
DataFrameClean <- cbind(DataFrameClean, DASSData)
SymptomsDataNums <- data.frame(matrix(ncol = ncol(SymptomsData), nrow = nrow(SymptomsData))) #Make empty dataframe to put in 'raw' symptomscores (e.g. 3 instead of L403)
colnames(SymptomsDataNums) <- colnames(SymptomsData)  #Give this new dataframe the same colnames as the original Symptomsdata dataframe
# Make better DataFrame
for (b in 1:ncol(SymptomsData)){   #loop over all columns (b refers to 'width' = 'breedte' = amount of columns)
for (h in 1:nrow(SymptomsData)){   #within each column, loop over all rows = participants (h refers to height = amount of rows)
SymptomsDataNums[h,b] <- as.numeric(substrRight(unlist(SymptomsData[h,b]),1)) # in each cell, fill in the last digit (e.g. 3) of the corresponding cell in SymptomsData (e.g. L403)
}
}
#same logic as with SymptomsDataNums
DisturbanceDataNums <- data.frame(matrix(ncol = ncol(DisturbanceData), nrow = nrow(DisturbanceData)))
colnames(DisturbanceDataNums) <- colnames(DisturbanceData)
for (b in 1:ncol(DisturbanceData)){
for (h in 1:nrow(DisturbanceData)){
DisturbanceDataNums[h,b] <- as.numeric(substrRight(unlist(DisturbanceData[h,b]),1))
}
}
PMSScore <- 0 #initialize variable
for (i in 1:nrow(DataFrame)){ #loop over all participants
req1 = 0 #initialize variables
req2 = 0
req3 = 0
# Requirement 1
if (sum(SymptomsDataNums[i,1:4] == 4)>0){ #if there's one or more values within the first four columns(=questions) of SymptomsDataNums that are equal to 4
req1 = 2  #then requirement 1 gets value 2
} else if (sum(SymptomsDataNums[i,1:4] == 3)>0){ #if there's one or more values within the first four columns of SymptomsDataNums that are equal to 3
req1 = 1 #then requirement 1 gets value 1
} else { #if there's no values within the first four columns that are equal to 3 or more
req1 = 0 #then requirement 1 gets value zero
}
# Requirement 2
if (sum(SymptomsDataNums[i,] >= 3) >= 5){ #if there are 5 or more values in SymptomsDataNums that are equal to three or more
req2 = 2 #then requirement 2 gets value 2
} else { #if not,
req2 = 0 #requirement 2 gets value 0
}
# Requirement 3
if (sum(DisturbanceDataNums[i,] == 4)>0){ #if there's one or more values within the five columns(=questions) of DisturbanceDataNums that are equal to 4
req3 = 2 #then requirement 3 gets value 2
} else if (sum(DisturbanceDataNums[i,] >= 3)>0){ #if there's one or more values within the first four columns of DisturbanceDataNums that are equal to 3
req3 = 1 #then requirement 3 gets value 1
} else { #if there's not one value within these five columns that is equal to 3 or more
req3 = 0 #then requirement 3 gets value 0
}
#Give each participant a PMSScore
if (req1 == 2 && req2 == 2 && req3 == 2){ #if the value of req 1 =2, req 2 = 2 and req 3 = 2
PMSScore[i] <- 2 #then that participant gets PMSScore 2 --> PMDD
} else if (req1 == 0 | req2 == 0 | req3 == 0){ #if the value of one of the requirements is equal to 0
PMSScore[i] <- 0 #then that participant gets PMSScore 0 --> no PMS
} else { #in all other cases...
PMSScore[i] <- 1 #...the participant gets PMSScore 1 --> PMS
}
}
PMSData <- cbind(PMSScore, DataFrame) #Add columns with PMSScore to DataFrame
DataFrameClean <- cbind(DataFrameClean, PMSScore)
library(ggplot2)
barplot(table(PMSData$Age), col = 'orange', main = 'Age', ylab = 'frequency', )
## CONTRACEPTION
#make dataset with info about contraception
ContraData <- data.frame(PMSData$Contraceptive.SQ001., PMSData$Contraceptive.SQ002., PMSData$Contraceptive.SQ003., PMSData$Contraceptive.SQ004., PMSData$Contraceptive.other.) #make dataframe with 'contraceptive' columns only
names(ContraData) <- c("pill", "hor. coil", "cop. coil", "natural", "other") #give new names to these columns
ContraData$Overview[ContraData$`pill` == 'Y'] = 'Pill'
ContraData$Overview[ContraData$`hor. coil` == 'Y'] = 'Hor. Coil'
ContraData$Overview[ContraData$`cop. coil` == 'Y'] = 'Cop. Coil'
ContraData$Overview[ContraData$`natural` == 'Y'] = 'Natural'
ContraData$Overview[ContraData$other != ''] = 'other'
ContraData$Overview <- as.factor(ContraData$Overview)
Contraception <- ContraData$Overview
DataFrameClean <- cbind(DataFrameClean, Contraception)
ggplot(data=ContraData, aes(x=Overview)) +
geom_bar(stat="count", color = "black", fill = "orangered3") +
xlab("Contraception Type")
ggplot(data=PMSData, aes(x=PMSScore)) +
geom_bar(stat="count", color = "black", fill = "green4") +
xlab("PMSScore")
SymptomsDF <- as.data.frame(allSymptoms)
DisturbanceDF <- as.data.frame(allDisturbance)
RRSDF <- as.data.frame(allRRS)
DASSDF <- as.data.frame(DASSData$DASS.Total)
library("yarrr")
plotVariable <- (numeric(nrow(SymptomsDF))+1)
SymptomsPlot <- pirateplot(formula = allSymptoms ~ plotVariable,
data = SymptomsDF,
theme = 3,
main = "Symptoms")
DisturbancePlot <- pirateplot(formula = allDisturbance ~ plotVariable,
data = DisturbanceDF,
theme = 3,
main = "Disturbance")
RRSPlot <- pirateplot(formula = allRRS ~ plotVariable,
data = RRSDF,
theme = 3,
main = "RRS")
DASSPlot <- pirateplot(formula = DASSData$DASS.Total ~ plotVariable,
data = DASSDF,
theme = 3,
main = "DASS")
DataFrameClean$Contraception[DataFrameClean$ï..id == 537] = 'other'
DataFrameClean$Contraception[DataFrameClean$ï..id == 466] = 'other'
ABData <- data.frame(matrix(ncol = 6, nrow = 3))
x <- c("Pill", "Hor. coil", "Cop.coil", "Natural", "Other", "RowTotal")
y <- c("No PMS", "PMS", "ColTotal")
colnames(ABData) <- x
rownames(ABData) <- y
ABData[1,1] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore == 0 & DataFrameClean$Contraception == 'Pill'] == "A-B")
ABData[1,2] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore == 0 & DataFrameClean$Contraception == 'Hor. Coil'] == "A-B")
ABData[1,3] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore == 0 & DataFrameClean$Contraception == 'Cop. Coil'] == "A-B")
ABData[1,4] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore == 0 & DataFrameClean$Contraception == 'Natural'] == "A-B")
ABData[1,5] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore == 0 & DataFrameClean$Contraception == 'other'] == "A-B")
ABData[1,6] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore == 0] == "A-B")
ABData[2,1] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore != 0 & DataFrameClean$Contraception == 'Pill'] == "A-B")
ABData[2,2] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore != 0 & DataFrameClean$Contraception == 'Hor. Coil'] == "A-B")
ABData[2,3] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore != 0 & DataFrameClean$Contraception == 'Cop. Coil'] == "A-B")
ABData[2,4] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore != 0 & DataFrameClean$Contraception == 'Natural'] == "A-B")
ABData[2,5] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore != 0 & DataFrameClean$Contraception == 'other'] == "A-B")
ABData[2,6] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore != 0] == "A-B")
ABData[3,1] <- sum(DataFrameClean$Order[DataFrameClean$Contraception == 'Pill'] == "A-B")
ABData[3,2] <- sum(DataFrameClean$Order[DataFrameClean$Contraception == 'Hor. Coil'] == "A-B")
ABData[3,3] <- sum(DataFrameClean$Order[DataFrameClean$Contraception == 'Cop. Coil'] == "A-B")
ABData[3,4] <- sum(DataFrameClean$Order[DataFrameClean$Contraception == 'Natural'] == "A-B")
ABData[3,5] <- sum(DataFrameClean$Order[DataFrameClean$Contraception == 'other'] == "A-B")
ABData[3,6] <- sum(DataFrameClean$Order == "A-B")
BAData <- data.frame(matrix(ncol = 6, nrow = 3))
x1 <- c("Pill", "Hor. coil", "Cop.coil", "Natural", "Other", "RowTotal")
y1 <- c("No PMS", "PMS", "ColTotal")
colnames(BAData) <- x1
rownames(BAData) <- y1
BAData[1,1] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore == 0 & DataFrameClean$Contraception == 'Pill'] == "B-A")
BAData[1,2] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore == 0 & DataFrameClean$Contraception == 'Hor. Coil'] == "B-A")
BAData[1,3] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore == 0 & DataFrameClean$Contraception == 'Cop. Coil'] == "B-A")
BAData[1,4] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore == 0 & DataFrameClean$Contraception == 'Natural'] == "B-A")
BAData[1,5] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore == 0 & DataFrameClean$Contraception == 'other'] == "B-A")
BAData[1,6] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore == 0] == "B-A")
BAData[2,1] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore != 0 & DataFrameClean$Contraception == 'Pill'] == "B-A")
BAData[2,2] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore != 0 & DataFrameClean$Contraception == 'Hor. Coil'] == "B-A")
BAData[2,3] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore != 0 & DataFrameClean$Contraception == 'Cop. Coil'] == "B-A")
BAData[2,4] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore != 0 & DataFrameClean$Contraception == 'Natural'] == "B-A")
BAData[2,5] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore != 0 & DataFrameClean$Contraception == 'other'] == "B-A")
BAData[2,6] <- sum(DataFrameClean$Order[DataFrameClean$PMSScore != 0] == "B-A")
BAData[3,1] <- sum(DataFrameClean$Order[DataFrameClean$Contraception == 'Pill'] == "B-A")
BAData[3,2] <- sum(DataFrameClean$Order[DataFrameClean$Contraception == 'Hor. Coil'] == "B-A")
BAData[3,3] <- sum(DataFrameClean$Order[DataFrameClean$Contraception == 'Cop. Coil'] == "B-A")
BAData[3,4] <- sum(DataFrameClean$Order[DataFrameClean$Contraception == 'Natural'] == "B-A")
BAData[3,5] <- sum(DataFrameClean$Order[DataFrameClean$Contraception == 'other'] == "B-A")
BAData[3,6] <- sum(DataFrameClean$Order == "B-A")
dataMoment1 <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"results-survey10001.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
dataMoment2 <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"results-survey10002.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
# Clean up data for faulty entries
dataMoment1 <- dataMoment1[!(dataMoment1$lastpage < 3 | is.na(dataMoment1$lastpage)), ]
dataMoment2 <- dataMoment2[!(dataMoment2$lastpage < 3 | is.na(dataMoment2$lastpage)), ]
rownames(dataMoment1) <- NULL
rownames(dataMoment2) <- NULL
# Make functions to extract questionnaire scores from the data
### PSS ###
getPSS <- function(data) {
tempData <- data[ , grepl("PSS.P", names(data))] # Make dataset with only RRS variables
allPSS = 0
for(i in 1:nrow(data)) { # loop through participants
PSSScore <- 0
for(t in 1:ncol(tempData)){ # loop through questions
temp = as.numeric(substrRight(unlist(tempData[t])[i],1)) # Take value i (participant) from RRSDATA, unlist, then take last character and turn it into a number (double)
PSSScore <- PSSScore + temp
}
allPSS[i] <- PSSScore
}
return(allPSS)
}
### BSRI ####
getBSRI <- function(data) {
tempData <- data[ , grepl("BSRI.B", names(data))] # Make dataset with only RRS variables
allBSRI = 0
for(i in 1:nrow(data)) { # loop through participants
BSRIScore <- 0
for(t in 1:ncol(tempData)){ # loop through questions
temp = as.numeric(unlist(tempData[t])[i]) # Take value i (participant) from RRSDATA, unlist, then take last character and turn it into a number (double)
BSRIScore <- BSRIScore + temp
}
allBSRI[i] <- BSRIScore
}
return(allBSRI)
}
dataMoment1$PSS = getPSS(dataMoment1)
dataMoment1$BSRI = getBSRI(dataMoment1)
dataMoment2$PSS = getPSS(dataMoment2)
dataMoment2$BSRI = getBSRI(dataMoment2)
# Get scores and add to right participants
PSS <- data.frame(PSS1 = matrix(NA, nrow = nrow(DataFrameClean), ncol = 1), PSS2 = matrix(NA, nrow = nrow(DataFrameClean), ncol = 1))
BSRI <- data.frame(BSRI1 = matrix(NA, nrow = nrow(DataFrameClean), ncol = 1), BSRI2 = matrix(NA, nrow = nrow(DataFrameClean), ncol = 1))
temp = 0
for (i in 1:nrow(DataFrameClean)){ # Loop over all participant rows that filled out screening completely
# DataMoment1
loc = which(dataMoment1$ParticipantNo == DataFrameClean$participantNo[i]) # Check at what location every specific participantNumber is present
# print(loc)
if (length(loc) == 0) {
temp = temp + 1
# print(paste0("Something going on with participant ",toString(DataFrameClean$participantNo[i])))
} else if (length(loc) == 1) {
PSS$PSS1[i] <- dataMoment1$PSS[loc]
BSRI$BSRI1[i] <- dataMoment1$BSRI[loc]
# print(dataMoment1$BSRI[loc])
} else {
# If there are multiple entries for one participant, we take the last entry #check this later #@Mitchel get back here some time
PSS$PSS1[i] <- dataMoment1$PSS[loc[length(loc)]]
BSRI$BSRI1[i] <- dataMoment1$BSRI[loc[length(loc)]]
}
# DataMoment2
loc = which(dataMoment2$ParticipantNo == DataFrameClean$participantNo[i]) # Check at what location every specific participantNumber is present
if (length(loc) == 0) {
# print(paste0("Something going on with participant ",toString(DataFrameClean$participantNo[i])))
} else if (length(loc) == 1) {
PSS$PSS2[i] <- dataMoment2$PSS[loc]
BSRI$BSRI2[i] <- dataMoment2$BSRI[loc]
# print(dataMoment1$BSRI[loc])
} else {
# If there are multiple entries for one participant, we take the last entry #check this later #@Mitchel get back here some time
PSS$PSS2[i] <- dataMoment1$PSS[loc[length(loc)]]
BSRI$BSRI2[i] <- dataMoment1$BSRI[loc[length(loc)]]
}
}
DataFrameClean$folliculairPSS = ''
DataFrameClean$folliculairBSRI = ''
DataFrameClean$luteaalPSS = ''
DataFrameClean$luteaalBSRI = ''
rownames(DataFrameClean) <- NULL # Wat easier for debugging
DataFrameClean$Order[DataFrameClean$Order == ""] = 'xx'
# Add the data to the dataFrame for right spot
for (i in 1:nrow(DataFrameClean)){
if (DataFrameClean$Order[i] == "A-B"){
DataFrameClean$folliculairPSS[i] = PSS$PSS1[i]
DataFrameClean$folliculairBSRI[i] = BSRI$BSRI1[i]
DataFrameClean$luteaalPSS[i] = PSS$PSS2[i]
DataFrameClean$luteaalBSRI[i] = BSRI$BSRI2[i]
} else if (DataFrameClean$Order[i] == "B-A"){
DataFrameClean$folliculairPSS[i] = PSS$PSS2[i]
DataFrameClean$folliculairBSRI[i] = BSRI$BSRI2[i]
DataFrameClean$luteaalPSS[i] = PSS$PSS1[i]
DataFrameClean$luteaalBSRI[i] = BSRI$BSRI1[i]
} else if (DataFrameClean$Order[i] == 'xx') { # For some reason doesn't have an order assigned yet
DataFrameClean$folliculairPSS[i] = NA
DataFrameClean$folliculairBSRI[i] = NA
DataFrameClean$luteaalPSS[i] = NA
DataFrameClean$luteaalBSRI[i] = NA
} else { # Checks for non-sensical order assignments
print("Order error")
break
}
}
write.csv(DataFrameClean, paste0(dataDir,dateDir,"cleanData.csv"), row.names = FALSE)
paste0(dataDir,dateDir,"cleanData.csv")
